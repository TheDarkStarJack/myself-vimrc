" Add Vim icon to window, where it is shown depends on platform, windowing
" system, X11 server depth, etc etc.
set guioptions+=i

" Automagically yank to windowing system clipboard on visual select.
" This makes gvim behave like a normal unix application.
set guioptions+=a

" 确定vim支持`+clipboard`后，如果想`y/p`直接和系统剪贴板打通，可以在`~/.vimrc`中加上以下配置）
set clipboard^=unnamed,unnamedplus

" 折叠
augroup filetype_vim
    autocmd!
    autocmd FileType vim setlocal foldmethod=marker
augroup END

" 'Config changed' autocmd hook
autocmd BufWritePost $MYGVIMRC let g:needrestart = 1

" Attempt to source .gvimrc.local for very machine-specific configurations that
" would benefit absolutely no one by being here. Mostly bug workarounds.
if filereadable(expand('~/.gvimrc.local'))
    source ~/.gvimrc.local
endif

" gvim 标签页 设置开始 ============
" 检查并创建目录
if has("win32") || has("win64")
    let vimtmp_path=$HOME . '\\vimtmp'
elseif has ("unix")
    let vimtmp_path=$HOME . '/.vimtmp'
endif

function! CheckAndCreateDir()
    " 检查 vimtmp_path 是否定义
    if exists('g:vimtmp_path')
        " 如果目录不存在，则创建它
        if !isdirectory(g:vimtmp_path)
            call mkdir(g:vimtmp_path, 'p')
        endif
    else
        echo "vimtmp_path is not defined."
    endif
endfunction

" 函数：创建新的临时文件
function! CreateTempFile()
    call CheckAndCreateDir()
    let l:filename = g:vimtmp_path . '/tab'

    " 找到下一个可用的文件名
    let l:counter = 1
    while filereadable(l:filename . l:counter . '.tmp')
        let l:counter += 1
    endwhile

    " 创建并打开新文件
    execute 'tabnew ' . l:filename . l:counter . '.tmp'
endfunction

" 启动时自动执行
autocmd VimEnter * call CheckAndCreateDir()

" 映射一个快捷键到创建临时文件的功能
" 选择一个不常用的快捷键组合，例如 crtl+n，我的大部分编辑器和终端都是crtl+n打开新标签页
map <C-N> :call CreateTempFile()<CR>

" 设置 Vim 的工作目录为 vimtmp 目录
" let vimtmp_path = '$HOME/vimtmp'

" 切换到 vimtmp 目录
call chdir(vimtmp_path)

" 将 vimtmp 目录下的所有文件添加到参数列表
" 使用 silent 防止命令回显
" 首先，检查当前目录下是否有文件
let files = split(glob('*'), '\n')
if len(files) > 0
    " 如果有文件，删除当前参数列表并添加当前目录下的所有文件
    silent! argdelete *
    argadd ./*
"else
    " 如果没有文件，可以给出提示或者执行其他操作
"    echo "当前目录没有文件。"
endif

" 打开参数列表中的第一个文件
if argc() > 0
    first 1
endif

" 如果有多个文件，使用 tab 打开每个文件
if argc() > 1
    silent! tabedit
    for n in range(2, argc())
        execute 'tabnext'
        execute 'arg' n
    endfor
    execute 'tabfirst'
endif
" gvim 标签页 设置结束 =====================

" 自动打开上次关闭时打开的标签页 设置开始==================
" 设置 Vim 退出时自动保存会话
autocmd VimLeave * silent! mksession! Session.vim

" 设置 Vim 启动时自动加载会话
if argc() == 0
    " 如果没有打开文件参数，尝试加载会话
    if filereadable("Session.vim")
        source Session.vim
    endif
endif
" 自动打开上次关闭时打开的标签页 设置结束==================
